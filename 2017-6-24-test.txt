/*************************************************************************
    > File Name: server_epoll.c
    > Author: chenkaixin
    > Mail: chenkaixin_1024@sina.com 
    > Created Time: Thu 22 Jun 2017 11:48:37 PM PDT
 ************************************************************************/

#include<stdio.h>
#include<sys/types.h>
#include<sys/socket.h>
#include<sys/epoll.h>
#include<arpa/inet.h>
#include<netinet/in.h>
#include<stdlib.h>
#include<string.h>
#define BUFSIZE 1024

int startup(char* ip,int port)
{
	int sockfd=socket(AF_INET,SOCK_STREAM,0);
	if(sockfd<0)
	{
		perror("socket");
		exit(1);
	}

	struct sockaddr_in local;
	local.sin_family=AF_INET;
	local.sin_port=htons(port);
	local.sin_addr.s_addr=inet_addr(ip);
	if(bind(sockfd,(struct sockaddr*)&local,sizeof(local))<0)
	{
		perror("bind");
		exit(2);
	}

	if(listen(sockfd,5)<0)
	{
		perror("listen");
		exit(3);
	}

	return sockfd;
}


void usage(char* proc)
{
	printf("usage:%s [ip] [port]\n",proc);
}

typedef struct fdbuff{
	int fd;
	char* buf;
}fdbuff_t,*fdbuff_p;

void alloc_fd(fdbuff_p fb,int fd)
{
	fb->fd=fd;
	fb->buf=(char*)malloc(BUFSIZE);
	if(fb->buf==NULL)
	{
		perror("malloc");
		exit(5);
	}
}

int main(int argc,char* argv[])
{
	if(argc!=3)
	{
		usage(argv[0]);
		exit(-1);
	}

	int listensock=startup(argv[1],atoi(argv[2]));
	int epollfd=epoll_create(256);
	if(epollfd<0)
	{
		perror("epoll_create");
		exit(4);
	}

	printf("epollfd=%d,listensock=%d\n",epollfd,listensock);

	fdbuff_t fb;
	alloc_fd(&fb,listensock);


	struct epoll_event _ev;
	_ev.events=EPOLLIN;
	_ev.data.ptr=(void*)&fb;

	if(epoll_ctl(epollfd,EPOLL_CTL_ADD,listensock,&_ev)<0)
	{
		perror("epoll_ctl");
		exit(6);
	}

	while(1)
	{
		struct epoll_event rev[64];
		int num;
		switch((num=epoll_wait(epollfd,rev,1024,-1)))
		{
			case -1:{
						perror("epoll_wait");
						exit(7);
					}break;
			case 0:{
					   printf("timeout...\n");
				   }break;
			default:{
						int i=0;
						for(;i<num;i++)
						{
							fdbuff_p p=(fdbuff_p)(rev[i].data.ptr);
							int fd=p->fd;
							if(fd==listensock&&(rev[i].events&EPOLLIN))
							{
								struct sockaddr_in client;
								socklen_t len=sizeof(client);
								int newsockfd=accept(fd,(struct sockaddr*)&client,&len);
								if(newsockfd<0)
								{
									perror("accept");
									continue;
								}

								printf("the client[%s:%d] come...\n",inet_ntoa(client.sin_addr),ntohs(client.sin_port));
								_ev.events=EPOLLIN;
								fdbuff_t fbf;
								alloc_fd(&fbf,newsockfd);
								_ev.data.ptr=(void*)&fbf;
								epoll_ctl(epollfd,EPOLL_CTL_ADD,newsockfd,&_ev);
							}
							else if(fd!=listensock&&(rev[i].events&EPOLLIN))
							{
								char* buf=p->buf;
								int rd=read(fd,buf,BUFSIZE-1);
								if(rd>0)
								{
									buf[rd]=0;
									printf("clinet: %s\n",buf);
									_ev.events=EPOLLOUT;
									epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&_ev);
								}
								else if(rd==0)
								{
									printf("the client exit...\n");
									epoll_ctl(epollfd,EPOLL_CTL_DEL,fd,NULL);
									close(fd);
									free(buf);
								}
								else
								{
									perror("read");
									exit(8);
								}
							}
							else if(fd!=listensock&&(rev[i].events&EPOLLOUT))
							{
								char* buf=p->buf;
								char* msg="HTTP/1.1 200 OK\r\nComtent-length: 11\r\n\r\nhello epoll";
								strcpy(buf,msg);
								write(fd,buf,strlen(buf)+1);
								_ev.events=EPOLLIN;
								epoll_ctl(epollfd,EPOLL_CTL_MOD,fd,&_ev);
								//close(fd);
								//free(buf);
							}
						}
					}break;
		}
	}



	return 0;
}