#include<stdio.h>
#include<sys/socket.h>
#include<sys/types.h>
#include<unistd.h>
#include<netinet/in.h>
#include<arpa/inet.h>
#include<string.h>
#include<stdlib.h>
#include<poll.h>


void usage()
{
	printf("the clicentpross [IPadress] [Portnum]\n");
}

int main(int argc,char* argv[])
{
	if(argc!=3)
	{
		usage();
		return -1;
	}

	int sockfd=socket(AF_INET,SOCK_STREAM,0);
	if(sockfd==-1)
	{
		perror("socket");
		return 1;
	}

	struct sockaddr_in local;
	memset(&local,0,sizeof(struct sockaddr_in));
	local.sin_family=AF_INET;
	local.sin_port=htons(atoi(argv[2]));
	local.sin_addr.s_addr=inet_addr(argv[1]);

	if(bind(sockfd,(struct sockaddr*)&local,sizeof(local))<0)
	{
		perror("bind");
		return 2;
	}

	if(listen(sockfd,5)<0)
	{
		perror("listen");
		return 3;
	}


	struct pollfd pfd[1024];
	int i=0;
	for(;i<1024;i++)
	{
		pfd[i].fd=-1;
		pfd[i].events=POLLIN;
		pfd[i].revents=0;
	}
	pfd[0].fd=sockfd;

	while(1)
	{
		int ret=poll(pfd,1024,3000);
		if(ret<0)
		{
			perror("poll");
			exit(5);
		}

		if(ret==0)
		{
			printf("timeout...\n");
		}
		else
		{
			for(i=0;i<1024;i++)
			{
				if(i==0&&pfd[i].fd!=-1&&pfd[i].revents==POLLIN)
				{
					struct sockaddr_in client;
					socklen_t len=sizeof(client);
					int newsockfd=accept(sockfd,(struct sockaddr*)&client,&len);
					if(newsockfd<0)
					{
						perror("accept");
						exit(4);
					}
					else
					{
						printf("the client[ip:%s] come ...\n",inet_ntoa(client.sin_addr));
						int j=1;
						for(;j<1024;j++)
						{
							if(pfd[j].fd==-1)
								break;
						}
						if(j<1024)
						{
							pfd[j].fd=newsockfd;
						}
						else
						{
							printf("the server is full...\n");
							close(newsockfd);
						}
					}
				}
				else if(i!=0&&pfd[i].fd!=-1&&pfd[i].revents==POLLIN)
				{
					char buf[1024];
					int rd=read(pfd[i].fd,buf,sizeof(buf)-1);
					if(rd>0)
					{
						printf("client:%s\n",buf);
						write(pfd[i].fd,buf,sizeof(buf)-1);
					}
					else if(rd==0)
					{
						printf("the client exit...\n");
						close(pfd[i].fd);
						pfd[i].fd=-1;
					}
					else
					{
						perror("read");
						exit(6);
					}

				}
			}
		}

	}



	return 0;
}
