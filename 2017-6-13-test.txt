/*************************************************************************
    > File Name: singaltest.c
    > Author: chenkaixin
    > Mail: chenkaixin_1024@sina.com 
    > Created Time: Tue 13 Jun 2017 12:06:09 AM PDT
 ************************************************************************/

#include<stdio.h>
#include<sys/types.h>
#include<signal.h>

//void handler(int sig)
//{
//	printf("the signal is %d\n",sig);
//}
//
//int main()
//{
////	int i = 0;
////	for(;i<32;i++)
////	{
////		signal(i,handler);
////	}
////
//	while(1);
//	return 0;
//}


//void handler(int sig)
//{
//	printf("signal is %d\n",sig);
//}
//
//
//int main(int argc,char* argv[])
//{
//	int i=0;
//	for(;i<32;i++)
//	{
//		signal(i,handler);
//	}
//
//	pid_t pid=atoi(argv[2]);
////	printf("pid is %d\n",pid);
//	int signum=atoi(argv[1]);
////	printf("signum is %d\n",signum);
//	int ret=kill(pid,signum);
//	printf("ret=%d\n",ret);
//
////	while(1);
//	return 0;
//}


//void handler(int sig)
//{
//	printf("the signal is %d\n",sig);
//}
//
//int main()
//{
//	signal(2,handler);
//	raise(2);
//	return 0;
//}


//void handler(int sig)
//{
//	unsigned int time=alarm(5);
//	printf("the time is %u\n",time);
//}
//
//int main()
//{
//	signal(SIGALRM,handler);
//	alarm(5);
//	int count=0;
//	while(1)
//	{
//		sleep(1);
//		printf("count=%d\n",count++);
//	}
//
//
//	return 0;
//}


//int main()
//{
//	unsigned int time=alarm(5);
//	printf("the time is %u\n",time);
//	sleep(3);
//	time=alarm(2);
//	printf("the time is %u\n",time);
//	int count=0;
//	while(1)
//	{
//		sleep(1);
//		printf("count=%d\n",++count);
//	}
//	return 0;
//}

#include<stdio.h>
#include<signal.h>
//sigset_t set,oset;

void Printpending(sigset_t *set)
{
	int i=1;
	for(;i<32;i++)
	{
		if(sigismember(set,i))
		{
			printf("1");
		}
		else
		{
			printf("0");
		}
	}
	printf("\n");
}

void handler(int sig)
{
	printf("the signal is %d\n",sig);
}

int main()
{
	signal(2,handler);

	sigset_t set,oset;
	sigemptyset(&set);
	sigemptyset(&oset);
	sigset_t pending;
	sigemptyset(&pending);

	sigaddset(&set,2);
	sigprocmask(SIG_BLOCK,&set,&oset);


	int count=0;
	while(1)
	{
		sigpending(&pending);
		Printpending(&pending);
		if(count==10)
		{
			sigprocmask(SIG_SETMASK,&oset,NULL);
		}

		count++;
		sleep(1);
	}

	return 0;
}